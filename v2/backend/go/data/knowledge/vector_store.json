{
  "ddl_1743397325997164603": {
    "id": "ddl_1743397325997164603",
    "type": "ddl",
    "content": "-- IMDb Movies Database Schema\n\n-- Main movies table\nCREATE TABLE movies (\n    id INTEGER PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    original_title VARCHAR(255),\n    original_language VARCHAR(10),\n    overview TEXT,\n    tagline TEXT,\n    status VARCHAR(50),\n    release_date DATE,\n    runtime INTEGER,\n    budget BIGINT,\n    revenue BIGINT,\n    popularity FLOAT,\n    vote_average FLOAT,\n    vote_count INTEGER,\n    adult BOOLEAN,\n    imdb_id VARCHAR(20) UNIQUE\n);\n\n-- Genres lookup table\nCREATE TABLE genres (\n    genre_id INTEGER PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n-- Movies to genres mapping (many-to-many)\nCREATE TABLE movie_genres (\n    movie_id INTEGER,\n    genre_id INTEGER,\n    PRIMARY KEY (movie_id, genre_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)\n);\n\n-- Production companies lookup table\nCREATE TABLE production_companies (\n    company_id INTEGER PRIMARY KEY,\n    company_name VARCHAR(255) UNIQUE NOT NULL\n);\n\n-- Movies to production companies mapping (many-to-many)\nCREATE TABLE movie_production_companies (\n    movie_id INTEGER,\n    company_id INTEGER,\n    PRIMARY KEY (movie_id, company_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (company_id) REFERENCES production_companies(company_id)\n);\n\n-- Countries lookup table\nCREATE TABLE countries (\n    country_id INTEGER PRIMARY KEY,\n    country_name VARCHAR(100) UNIQUE NOT NULL,\n    country_code VARCHAR(10) UNIQUE NOT NULL\n);\n\n-- Movies to production countries mapping (many-to-many)\nCREATE TABLE movie_production_countries (\n    movie_id INTEGER,\n    country_id INTEGER,\n    PRIMARY KEY (movie_id, country_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (country_id) REFERENCES countries(country_id)\n);\n\n-- Languages lookup table\nCREATE TABLE languages (\n    language_id INTEGER PRIMARY KEY,\n    language_name VARCHAR(100) UNIQUE NOT NULL,\n    language_code VARCHAR(10) UNIQUE NOT NULL\n);\n\n-- Movies to spoken languages mapping (many-to-many)\nCREATE TABLE movie_spoken_languages (\n    movie_id INTEGER,\n    language_id INTEGER,\n    PRIMARY KEY (movie_id, language_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (language_id) REFERENCES languages(language_id)\n);\n\n-- Keywords lookup table\nCREATE TABLE keywords (\n    keyword_id INTEGER PRIMARY KEY,\n    keyword_name VARCHAR(100) UNIQUE NOT NULL\n);\n\n-- Movies to keywords mapping (many-to-many)\nCREATE TABLE movie_keywords (\n    movie_id INTEGER,\n    keyword_id INTEGER,\n    PRIMARY KEY (movie_id, keyword_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (keyword_id) REFERENCES keywords(keyword_id)\n);\n\n-- Create some useful indexes\nCREATE INDEX idx_movies_release_date ON movies(release_date);\nCREATE INDEX idx_movies_vote_average ON movies(vote_average);\nCREATE INDEX idx_movies_popularity ON movies(popularity);\nCREATE INDEX idx_movies_revenue ON movies(revenue);\nCREATE INDEX idx_movies_budget ON movies(budget);\n",
    "metadata": {
      "name": "IMDb Movies Database Schema.txt"
    },
    "embedding": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03473371,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.14852795,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01918624,
      0.01918624,
      0,
      0,
      0.015547469,
      0.0119087,
      0,
      0,
      0.0039695664,
      0.0019847832,
      0.0013231889,
      0,
      0,
      0.0026463778,
      0,
      0,
      0,
      0,
      0,
      0.0052927556,
      0,
      0,
      0,
      0,
      0,
      0.021832617,
      0.004631161,
      0.013231888,
      0.0026463778,
      0.055243134,
      0.007277539,
      0.010254714,
      0.0039695664,
      0.018855441,
      0,
      0.007277539,
      0.010254714,
      0.0062851473,
      0.02480979,
      0.008931525,
      0.0039695664,
      0.0026463778,
      0.036387693,
      0.0036387695,
      0.020509427,
      0.007939133,
      0.0039695664,
      0,
      0.0023155806,
      0.010585511,
      0,
      0,
      0,
      0,
      0,
      0.025471386,
      0,
      0.029440952,
      0.0039695664,
      0.0109163085,
      0.026794575,
      0.05358915,
      0.00033079722,
      0.01653986,
      0.00033079722,
      0.043665234,
      0,
      0.005623553,
      0.0119087,
      0.0238174,
      0.028448561,
      0.042011246,
      0.013231888,
      0,
      0.01918624,
      0.019517036,
      0.019847833,
      0.017201455,
      0.018193847,
      0.0039695664,
      0.0019847832,
      0.012239497,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "date_added": "2025-03-31T01:02:05-04:00",
    "description": "DDL Schema for IMDB"
  },
  "ddl_1743398459125941681": {
    "id": "ddl_1743398459125941681",
    "type": "ddl",
    "content": "-- IMDb Movies Database Schema\n\n-- Main movies table\nCREATE TABLE movies (\n    id INTEGER PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    original_title VARCHAR(255),\n    original_language VARCHAR(10),\n    overview TEXT,\n    tagline TEXT,\n    status VARCHAR(50),\n    release_date DATE,\n    runtime INTEGER,\n    budget BIGINT,\n    revenue BIGINT,\n    popularity FLOAT,\n    vote_average FLOAT,\n    vote_count INTEGER,\n    adult BOOLEAN,\n    imdb_id VARCHAR(20) UNIQUE\n);\n\n-- Genres lookup table\nCREATE TABLE genres (\n    genre_id INTEGER PRIMARY KEY,\n    genre_name VARCHAR(50) UNIQUE NOT NULL\n);\n\n-- Movies to genres mapping (many-to-many)\nCREATE TABLE movie_genres (\n    movie_id INTEGER,\n    genre_id INTEGER,\n    PRIMARY KEY (movie_id, genre_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)\n);\n\n-- Production companies lookup table\nCREATE TABLE production_companies (\n    company_id INTEGER PRIMARY KEY,\n    company_name VARCHAR(255) UNIQUE NOT NULL\n);\n\n-- Movies to production companies mapping (many-to-many)\nCREATE TABLE movie_production_companies (\n    movie_id INTEGER,\n    company_id INTEGER,\n    PRIMARY KEY (movie_id, company_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (company_id) REFERENCES production_companies(company_id)\n);\n\n-- Countries lookup table\nCREATE TABLE countries (\n    country_id INTEGER PRIMARY KEY,\n    country_name VARCHAR(100) UNIQUE NOT NULL,\n    country_code VARCHAR(10) UNIQUE NOT NULL\n);\n\n-- Movies to production countries mapping (many-to-many)\nCREATE TABLE movie_production_countries (\n    movie_id INTEGER,\n    country_id INTEGER,\n    PRIMARY KEY (movie_id, country_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (country_id) REFERENCES countries(country_id)\n);\n\n-- Languages lookup table\nCREATE TABLE languages (\n    language_id INTEGER PRIMARY KEY,\n    language_name VARCHAR(100) UNIQUE NOT NULL,\n    language_code VARCHAR(10) UNIQUE NOT NULL\n);\n\n-- Movies to spoken languages mapping (many-to-many)\nCREATE TABLE movie_spoken_languages (\n    movie_id INTEGER,\n    language_id INTEGER,\n    PRIMARY KEY (movie_id, language_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (language_id) REFERENCES languages(language_id)\n);\n\n-- Keywords lookup table\nCREATE TABLE keywords (\n    keyword_id INTEGER PRIMARY KEY,\n    keyword_name VARCHAR(100) UNIQUE NOT NULL\n);\n\n-- Movies to keywords mapping (many-to-many)\nCREATE TABLE movie_keywords (\n    movie_id INTEGER,\n    keyword_id INTEGER,\n    PRIMARY KEY (movie_id, keyword_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(id),\n    FOREIGN KEY (keyword_id) REFERENCES keywords(keyword_id)\n);\n\n-- Create some useful indexes\nCREATE INDEX idx_movies_release_date ON movies(release_date);\nCREATE INDEX idx_movies_vote_average ON movies(vote_average);\nCREATE INDEX idx_movies_popularity ON movies(popularity);\nCREATE INDEX idx_movies_revenue ON movies(revenue);\nCREATE INDEX idx_movies_budget ON movies(budget);\n",
    "metadata": {
      "name": "IMDb Movies Database Schema.txt"
    },
    "embedding": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03473371,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.14852795,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01918624,
      0.01918624,
      0,
      0,
      0.015547469,
      0.0119087,
      0,
      0,
      0.0039695664,
      0.0019847832,
      0.0013231889,
      0,
      0,
      0.0026463778,
      0,
      0,
      0,
      0,
      0,
      0.0052927556,
      0,
      0,
      0,
      0,
      0,
      0.021832617,
      0.004631161,
      0.013231888,
      0.0026463778,
      0.055243134,
      0.007277539,
      0.010254714,
      0.0039695664,
      0.018855441,
      0,
      0.007277539,
      0.010254714,
      0.0062851473,
      0.02480979,
      0.008931525,
      0.0039695664,
      0.0026463778,
      0.036387693,
      0.0036387695,
      0.020509427,
      0.007939133,
      0.0039695664,
      0,
      0.0023155806,
      0.010585511,
      0,
      0,
      0,
      0,
      0,
      0.025471386,
      0,
      0.029440952,
      0.0039695664,
      0.0109163085,
      0.026794575,
      0.05358915,
      0.00033079722,
      0.01653986,
      0.00033079722,
      0.043665234,
      0,
      0.005623553,
      0.0119087,
      0.0238174,
      0.028448561,
      0.042011246,
      0.013231888,
      0,
      0.01918624,
      0.019517036,
      0.019847833,
      0.017201455,
      0.018193847,
      0.0039695664,
      0.0019847832,
      0.012239497,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "date_added": "2025-03-31T01:20:59-04:00",
    "description": "DDL Schema"
  },
  "doc_1743398436546289802": {
    "id": "doc_1743398436546289802",
    "type": "documentation",
    "content": "# IMDb Movies Database Documentation\n\nThis document provides comprehensive information about the IMDb movies database schema, its tables, relationships, and recommended query patterns.\n\n## Overview\n\nThe IMDb movies database contains information about movies including their basic details, ratings, financial data, cast, crew, and categorization. The database is designed with a normalized structure to efficiently store and query movie data.\n\n## Tables and Their Relationships\n\n### Main Tables\n\n#### `movies`\nThe central table containing core movie information.\n- `id`: Primary key, unique identifier for each movie.\n- `title`: The title of the movie as commonly known.\n- `original_title`: The title in its original language.\n- `original_language`: Code representing the movie's original language (e.g., \"en\" for English).\n- `overview`: Plot summary or description.\n- `tagline`: Short promotional phrase associated with the movie.\n- `status`: Current state of the movie (e.g., \"Released\", \"In Production\").\n- `release_date`: Official release date.\n- `runtime`: Duration in minutes.\n- `budget`: Production cost (USD).\n- `revenue`: Total earnings (USD).\n- `popularity`: Metric indicating the movie's popularity.\n- `vote_average`: Average rating (scale 0-10).\n- `vote_count`: Number of ratings received.\n- `adult`: Boolean indicating if the movie contains adult content.\n- `imdb_id`: IMDb's unique identifier for the movie.\n\n### Lookup Tables and Many-to-Many Relationships\n\n#### `genres` and `movie_genres`\nMovie categorization by genre.\n- A movie can have multiple genres.\n- A genre can be associated with multiple movies.\n\n#### `production_companies` and `movie_production_companies`\nCompanies involved in producing the movies.\n- A movie can be produced by multiple companies.\n- A company can produce multiple movies.\n\n#### `countries` and `movie_production_countries`\nCountries where movies were produced.\n- A movie can be produced in multiple countries.\n- A country can be involved in the production of multiple movies.\n\n#### `languages` and `movie_spoken_languages`\nLanguages spoken in the movies.\n- A movie can feature multiple languages.\n- A language can be used in multiple movies.\n\n#### `keywords` and `movie_keywords`\nTerms or phrases associated with the movies for categorization.\n- A movie can have multiple keywords.\n- A keyword can be associated with multiple movies.\n\n## Common Query Patterns\n\n### Basic Movie Retrieval\n```sql\nSELECT * FROM movies WHERE title LIKE '%Star Wars%';\n```\n\n### Finding Movies by Genre\n```sql\nSELECT m.* \nFROM movies m\nJOIN movie_genres mg ON m.id = mg.movie_id\nJOIN genres g ON mg.genre_id = g.genre_id\nWHERE g.genre_name = 'Action';\n```\n\n### Top-Rated Movies\n```sql\nSELECT title, vote_average, vote_count\nFROM movies\nWHERE vote_count \u003e 1000\nORDER BY vote_average DESC\nLIMIT 10;\n```\n\n### Highest-Grossing Movies\n```sql\nSELECT title, revenue, budget, (revenue - budget) AS profit\nFROM movies\nWHERE budget \u003e 0 AND revenue \u003e 0\nORDER BY revenue DESC\nLIMIT 10;\n```\n\n### Movies by Production Company\n```sql\nSELECT m.title, m.release_date\nFROM movies m\nJOIN movie_production_companies mpc ON m.id = mpc.movie_id\nJOIN production_companies pc ON mpc.company_id = pc.company_id\nWHERE pc.company_name = 'Warner Bros.';\n```\n\n### Movies by Language\n```sql\nSELECT m.title\nFROM movies m\nJOIN movie_spoken_languages msl ON m.id = msl.movie_id\nJOIN languages l ON msl.language_id = l.language_id\nWHERE l.language_name = 'French';\n```\n\n### Movies by Production Country\n```sql\nSELECT m.title\nFROM movies m\nJOIN movie_production_countries mpc ON m.id = mpc.movie_id\nJOIN countries c ON mpc.country_id = c.country_id\nWHERE c.country_name = 'Japan';\n```\n\n### Movies with Specific Keywords\n```sql\nSELECT m.title\nFROM movies m\nJOIN movie_keywords mk ON m.id = mk.movie_id\nJOIN keywords k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name IN ('superhero', 'based on comic');\n```\n\n### Movie Trends by Year\n```sql\nSELECT EXTRACT(YEAR FROM release_date) AS year, \n       COUNT(*) AS movie_count, \n       AVG(vote_average) AS avg_rating\nFROM movies\nGROUP BY year\nORDER BY year DESC;\n```\n\n### Most Popular Genres Over Time\n```sql\nSELECT EXTRACT(YEAR FROM m.release_date) AS year, \n       g.genre_name, \n       COUNT(*) AS movie_count\nFROM movies m\nJOIN movie_genres mg ON m.id = mg.movie_id\nJOIN genres g ON mg.genre_id = g.genre_id\nWHERE m.release_date IS NOT NULL\nGROUP BY year, g.genre_name\nORDER BY year DESC, movie_count DESC;\n```\n\n## Performance Considerations\n\n1. The schema includes indexes on frequently queried columns like `release_date`, `vote_average`, `popularity`, `revenue`, and `budget`.\n2. For text searches on `title` or `overview`, consider using full-text search capabilities of your database system.\n3. When querying across multiple many-to-many relationships, use appropriate JOIN strategies to optimize performance.\n4. For analytical queries on large datasets, consider materialized views or pre-aggregated tables.\n\n## Data Integrity\n\n1. The schema enforces referential integrity through foreign key constraints.\n2. The `movies` table uses `id` as its primary key, while the `imdb_id` field provides a unique external reference.\n3. Lookup tables use surrogate keys with meaningful name fields to support internationalization and avoid repetition.\n\n## Recommended Extensions\n\n1. Add a `cast` and `crew` structure to track actors, directors, and other film personnel.\n2. Implement a `collections` table to group movie franchises (e.g., \"Star Wars Saga\").\n3. Add user-specific tables for personalized recommendations and watch history.\n",
    "metadata": {
      "tags": [],
      "title": "Dataset Documentation for IMDB"
    },
    "embedding": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.030335667,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.122958176,
      0,
      0.0014360079,
      0.013103572,
      0,
      0.00035900198,
      0,
      0.0030515168,
      0.0023335128,
      0.0023335128,
      0.00071800395,
      0,
      0.0064620357,
      0.0066415365,
      0.0181296,
      0,
      0.0016155089,
      0.0012565069,
      0.00053850294,
      0.00053850294,
      0.00017950099,
      0,
      0,
      0,
      0,
      0,
      0.0028720158,
      0.0017950098,
      0,
      0.0028720158,
      0.00053850294,
      0,
      0,
      0.0046670255,
      0.0016155089,
      0.004846527,
      0.0035900197,
      0.009693054,
      0.0028720158,
      0.0010770059,
      0.0017950098,
      0.004846527,
      0.0025130138,
      0.00035900198,
      0.0034105189,
      0.0061030337,
      0.0057440316,
      0.008795548,
      0.001974511,
      0.00017950099,
      0.0073595406,
      0.005205529,
      0.0066415365,
      0.0012565069,
      0.00017950099,
      0.0023335128,
      0.00035900198,
      0.0016155089,
      0,
      0,
      0,
      0,
      0,
      0.011847065,
      0.025130138,
      0.04882427,
      0.008077544,
      0.024053132,
      0.025848143,
      0.08921199,
      0.0068210377,
      0.019924609,
      0.010770059,
      0.058337823,
      0,
      0.004846527,
      0.024412135,
      0.031053672,
      0.04559325,
      0.05115778,
      0.015975587,
      0.0034105189,
      0.040746722,
      0.039310716,
      0.045234248,
      0.022078622,
      0.02010411,
      0.0050260276,
      0.0008975049,
      0.010770059,
      0.0014360079,
      0,
      0,
      0,
      0,
      0
    ],
    "date_added": "2025-03-31T01:20:36-04:00",
    "description": "Dataset Documentation for IMDB"
  }
}